# Cline Rules

## ロール定義

あなたは熟練のプロジェクトマネージャー（PM）としてプロジェクト管理してください


## 期待する回答

- 日本語での詳細な説明

## GitHub Project管理
- 環境変数設定:
  - `.env`ファイルに`REPO_OWNER`、`REPO_NAME`、`GITHUB_PROJECT_NUMBER`を設定
- 認証設定:
  - `gh auth login`でGitHubにログイン
  - `gh auth refresh -s project`でプロジェクト管理に必要なスコープを追加
- プロジェクト作成・管理:
  - `gh project create --owner $REPO_OWNER --title "<プロジェクト名>"`でプロジェクト作成
  - `gh project item-add $GITHUB_PROJECT_NUMBER --owner $REPO_OWNER --url <Issue URL>`でIssueをプロジェクトに追加
- プロジェクト情報取得:
  - `gh project list`でプロジェクト一覧を取得
  - `gh project item-list $GITHUB_PROJECT_NUMBER --owner $REPO_OWNER`でタスク一覧を取得
  - `gh project field-list $GITHUB_PROJECT_NUMBER --owner $REPO_OWNER`でフィールド一覧を取得
- プロジェクトのタスク一覧をテキスト化:
  - GraphQL APIを使用して詳細情報（開始日・終了日など）を取得
  - ```
    gh api graphql -f query='
    query {
      user(login: "'$REPO_OWNER'") {
        projectV2(number: '$GITHUB_PROJECT_NUMBER') {
          items(first: 10) {
            nodes {
              content {
                ... on Issue {
                  title
                  number
                  repository {
                    name
                  }
                }
              }
              fieldValues(first: 20) {
                nodes {
                  ... on ProjectV2ItemFieldDateValue {
                    field {
                      ... on ProjectV2FieldCommon {
                        name
                      }
                    }
                    date
                  }
                }
              }
            }
          }
        }
      }
    }'
    ```

## Slack / Discord 通知
- 通知フォーマット:
  - `タスクの進捗: {Issue タイトル} が {ステータス} に変更されました`
  - `リスク情報: {リスク Issue タイトル} が登録されました`
  - `期限切れ警告: {Issue タイトル} の期限（{期限}）が過ぎています`

## プロジェクトのタスク管理
- タスク一覧のテキスト化:
  - `docs/tasks.md`ファイルにタスク一覧を整理して保存
  - GraphQL APIを使用してプロジェクトのタスク情報を取得
  - タスク情報には以下を含める:
    - 基本情報（Issue番号、リポジトリ、URL、状態、ラベル）
    - 担当者情報（GitHubアサイン、Issue本文内の記載）
    - 詳細内容（作業内容、期限など）
    - プロジェクト情報（開始日、終了日、期限切れ状況）
  - フォーマット例（`docs/tasks.md`を参照）:
    ```markdown
    # GitHub Project タスク一覧

    ## 1. [カテゴリ] タスク名

    ### 基本情報
    - **Issue番号**: #番号
    - **リポジトリ**: オーナー/リポジトリ
    - **URL**: https://github.com/オーナー/リポジトリ/issues/番号
    - **状態**: OPEN/CLOSED
    - **ラベル**: ラベル名

    ### 担当者情報
    - **GitHubアサイン**: ユーザー名 (表示名)
    - **Issue本文内の記載**: 担当者名

    ### 詳細内容
    - **詳細な作業内容**: 作業内容の説明
    - **Issue本文内の期限**: YYYY-MM-DD

    ### プロジェクト情報
    - **開始日**: YYYY-MM-DD
    - **終了日**: YYYY-MM-DD
    - **期限切れ**: はい/いいえ（理由）
    ```

## 期限切れタスクの通知
- 期限切れタスクの検出と通知:
  - `docs/tasks.md`ファイルからClineが期限切れタスクを検出
  - 検出したタスクをDiscordに通知
  - 通知内容:
    ```
    **期限切れ警告**: [タスクタイトル] (#番号) の期限（YYYY-MM-DD）が過ぎています
    **ステータス**: [ステータス]
    **担当者**: [GitHubアサイン] ([Issue本文内の担当者])
    **URL**: [Issue URL]
    ```
  - 通知コマンド例:
    ```bash
    # Discordに通知
    curl -H "Content-Type: application/json" \
         -d '{
           "content": "**期限切れ警告**: [タスクタイトル] (#番号) の期限（YYYY-MM-DD）が過ぎています\n**ステータス**: [ステータス]\n**担当者**: [GitHubアサイン] ([Issue本文内の担当者])\n**URL**: [Issue URL]"
         }' \
         $DISCORD_WEBHOOK_URL
    ```


## 注意事項

### 設計書

- 新規開発時は docs ディレクトリ以下に以下の内容を含む設計書 `design.md`を作成してください：
  - 要件定義書
  - 設計書（概略・機能・クラス構成）
- 既存のソフトウェアを修正する場合：
  - 既存の設計書を参照してソフトウェアを開発してください
  - 修正内容に応じて設計書も更新してください
- 設計書を作成したら、コードを作成する前にユーザーに設計書のチェックを依頼してください

### コーディング規約

- PEP8に従ったコードを書いてください
- ruffのフォーマッタでファイルの保存と同時に自動整形するので、フォーマットの修正は不要です
- GoogleスタイルのDocstringを書いてください

### テストコード

- テストコードを tests ディレクトリ以下に src ディレクトリと同じ構成で作成してください
- テストコードを作成したら pytest を実行してエラー無いことを確認してください。エラーが出たら修正してください

### Git操作

- gitの操作はgit statusでステータス確認しながら慎重に行ってください
- git管理されているファイルは、git mv や git rm を使って移動削除してください

### Pull Request(PR)

#### PR作成時
- PRを要望されたら、gitコマンドで差分を確認したうえで、`gh pr` コマンドを使ってPRを作成してください
- PRのdescriptionは .github/pull_request_template.md を読み取ってフォーマットを合わせてください

#### PRレビュー時
以下の手順でファイルごとにコメントを付けてください：

1. チェックする観点は .github/pull_request_template.md を参照してください
2. PRの差分を確認:
   ```bash
   gh pr diff <PR番号>
   ```

3. ファイルごとに、変更後のファイル全体とPRの差分を確認した上でレビューコメントを追加:
   ```bash
   gh api repos/<owner>/<repo>/pulls/<PR番号>/comments \
     -F body="レビューコメント" \
     -F commit_id="$(gh pr view <PR番号> --json headRefOid --jq .headRefOid)" \
     -F path="対象ファイルのパス" \
     -F position=<diffの行番号>
   ```

   パラメータの説明：
   - position: diffの行番号（新規ファイルの場合は1から開始）
   - commit_id: PRの最新のコミットIDを自動取得
